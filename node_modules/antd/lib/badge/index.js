"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var React = _interopRequireWildcard(require("react"));

var PropTypes = _interopRequireWildcard(require("prop-types"));

var _rcAnimate = _interopRequireDefault(require("rc-animate"));

var _ScrollNumber = _interopRequireDefault(require("./ScrollNumber"));

var _classnames = _interopRequireDefault(require("classnames"));

var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];
  }
  return t;
};

var Badge =
/*#__PURE__*/
function (_React$Component) {
  (0, _inherits2["default"])(Badge, _React$Component);

  function Badge() {
    (0, _classCallCheck2["default"])(this, Badge);
    return (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(Badge).apply(this, arguments));
  }

  (0, _createClass2["default"])(Badge, [{
    key: "getBadgeClassName",
    value: function getBadgeClassName() {
      var _classNames;

      var _this$props = this.props,
          prefixCls = _this$props.prefixCls,
          className = _this$props.className,
          status = _this$props.status,
          children = _this$props.children;
      return (0, _classnames["default"])(className, prefixCls, (_classNames = {}, (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-status"), !!status), (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-not-a-wrapper"), !children), _classNames));
    }
  }, {
    key: "isZero",
    value: function isZero() {
      var numberedDispayCount = this.getNumberedDispayCount();
      return numberedDispayCount === '0' || numberedDispayCount === 0;
    }
  }, {
    key: "isDot",
    value: function isDot() {
      var _this$props2 = this.props,
          dot = _this$props2.dot,
          status = _this$props2.status;
      var isZero = this.isZero();
      return dot && !isZero || status;
    }
  }, {
    key: "isHidden",
    value: function isHidden() {
      var showZero = this.props.showZero;
      var displayCount = this.getDispayCount();
      var isZero = this.isZero();
      var isDot = this.isDot();
      var isEmpty = displayCount === null || displayCount === undefined || displayCount === '';
      return (isEmpty || isZero && !showZero) && !isDot;
    }
  }, {
    key: "getNumberedDispayCount",
    value: function getNumberedDispayCount() {
      var _this$props3 = this.props,
          count = _this$props3.count,
          overflowCount = _this$props3.overflowCount;
      var displayCount = count > overflowCount ? "".concat(overflowCount, "+") : count;
      return displayCount;
    }
  }, {
    key: "getDispayCount",
    value: function getDispayCount() {
      var isDot = this.isDot(); // dot mode don't need count

      if (isDot) {
        return '';
      }

      return this.getNumberedDispayCount();
    }
  }, {
    key: "getScollNumberTitle",
    value: function getScollNumberTitle() {
      var _this$props4 = this.props,
          title = _this$props4.title,
          count = _this$props4.count;

      if (title) {
        return title;
      }

      return typeof count === 'string' || typeof count === 'number' ? count : undefined;
    }
  }, {
    key: "getStyleWithOffset",
    value: function getStyleWithOffset() {
      var _this$props5 = this.props,
          offset = _this$props5.offset,
          style = _this$props5.style;
      return offset ? (0, _extends2["default"])({
        right: -parseInt(offset[0], 10),
        marginTop: offset[1]
      }, style) : style;
    }
  }, {
    key: "renderStatusText",
    value: function renderStatusText() {
      var _this$props6 = this.props,
          prefixCls = _this$props6.prefixCls,
          text = _this$props6.text;
      var hidden = this.isHidden();
      return hidden || !text ? null : React.createElement("span", {
        className: "".concat(prefixCls, "-status-text")
      }, text);
    }
  }, {
    key: "renderDispayComponent",
    value: function renderDispayComponent() {
      var count = this.props.count;
      var customNode = count;

      if (!customNode || (0, _typeof2["default"])(customNode) !== 'object') {
        return undefined;
      }

      return React.cloneElement(customNode, {
        style: (0, _extends2["default"])({}, this.getStyleWithOffset(), customNode.props && customNode.props.style)
      });
    }
  }, {
    key: "renderBadgeNumber",
    value: function renderBadgeNumber() {
      var _classNames2;

      var _this$props7 = this.props,
          count = _this$props7.count,
          prefixCls = _this$props7.prefixCls,
          scrollNumberPrefixCls = _this$props7.scrollNumberPrefixCls,
          status = _this$props7.status;
      var displayCount = this.getDispayCount();
      var isDot = this.isDot();
      var hidden = this.isHidden();
      var scrollNumberCls = (0, _classnames["default"])((_classNames2 = {}, (0, _defineProperty2["default"])(_classNames2, "".concat(prefixCls, "-dot"), isDot), (0, _defineProperty2["default"])(_classNames2, "".concat(prefixCls, "-count"), !isDot), (0, _defineProperty2["default"])(_classNames2, "".concat(prefixCls, "-multiple-words"), !isDot && count && count.toString && count.toString().length > 1), (0, _defineProperty2["default"])(_classNames2, "".concat(prefixCls, "-status-").concat(status), !!status), _classNames2));
      return hidden ? null : React.createElement(_ScrollNumber["default"], {
        prefixCls: scrollNumberPrefixCls,
        "data-show": !hidden,
        className: scrollNumberCls,
        count: displayCount,
        displayComponent: this.renderDispayComponent() // <Badge status="success" count={<Icon type="xxx" />}></Badge>
        ,
        title: this.getScollNumberTitle(),
        style: this.getStyleWithOffset(),
        key: "scrollNumber"
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _classNames3;

      var _a = this.props,
          count = _a.count,
          showZero = _a.showZero,
          prefixCls = _a.prefixCls,
          scrollNumberPrefixCls = _a.scrollNumberPrefixCls,
          overflowCount = _a.overflowCount,
          className = _a.className,
          style = _a.style,
          children = _a.children,
          dot = _a.dot,
          status = _a.status,
          text = _a.text,
          offset = _a.offset,
          title = _a.title,
          restProps = __rest(_a, ["count", "showZero", "prefixCls", "scrollNumberPrefixCls", "overflowCount", "className", "style", "children", "dot", "status", "text", "offset", "title"]);

      var scrollNumber = this.renderBadgeNumber();
      var statusText = this.renderStatusText();
      var statusCls = (0, _classnames["default"])((_classNames3 = {}, (0, _defineProperty2["default"])(_classNames3, "".concat(prefixCls, "-status-dot"), !!status), (0, _defineProperty2["default"])(_classNames3, "".concat(prefixCls, "-status-").concat(status), !!status), _classNames3)); // <Badge status="success" />

      if (!children && status) {
        return React.createElement("span", (0, _extends2["default"])({}, restProps, {
          className: this.getBadgeClassName(),
          style: this.getStyleWithOffset()
        }), React.createElement("span", {
          className: statusCls
        }), React.createElement("span", {
          className: "".concat(prefixCls, "-status-text")
        }, text));
      }

      return React.createElement("span", (0, _extends2["default"])({}, restProps, {
        className: this.getBadgeClassName()
      }), children, React.createElement(_rcAnimate["default"], {
        component: "",
        showProp: "data-show",
        transitionName: children ? "".concat(prefixCls, "-zoom") : '',
        transitionAppear: true
      }, scrollNumber), statusText);
    }
  }]);
  return Badge;
}(React.Component);

exports["default"] = Badge;
Badge.defaultProps = {
  prefixCls: 'ant-badge',
  scrollNumberPrefixCls: 'ant-scroll-number',
  count: null,
  showZero: false,
  dot: false,
  overflowCount: 99
};
Badge.propTypes = {
  count: PropTypes.node,
  showZero: PropTypes.bool,
  dot: PropTypes.bool,
  overflowCount: PropTypes.number
};