"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = wrapPicker;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var React = _interopRequireWildcard(require("react"));

var _Panel = _interopRequireDefault(require("rc-time-picker/lib/Panel"));

var _classnames = _interopRequireDefault(require("classnames"));

var _LocaleReceiver = _interopRequireDefault(require("../locale-provider/LocaleReceiver"));

var _timePicker = require("../time-picker");

var _en_US = _interopRequireDefault(require("./locale/en_US"));

function getColumns(_ref) {
  var showHour = _ref.showHour,
      showMinute = _ref.showMinute,
      showSecond = _ref.showSecond,
      use12Hours = _ref.use12Hours;
  var column = 0;

  if (showHour) {
    column += 1;
  }

  if (showMinute) {
    column += 1;
  }

  if (showSecond) {
    column += 1;
  }

  if (use12Hours) {
    column += 1;
  }

  return column;
}

function wrapPicker(Picker, defaultFormat) {
  var _a;

  return _a =
  /*#__PURE__*/
  function (_React$Component) {
    (0, _inherits2["default"])(PickerWrapper, _React$Component);

    function PickerWrapper() {
      var _this;

      (0, _classCallCheck2["default"])(this, PickerWrapper);
      _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(PickerWrapper).apply(this, arguments));

      _this.handleOpenChange = function (open) {
        var onOpenChange = _this.props.onOpenChange;
        onOpenChange(open);
      };

      _this.handleFocus = function (e) {
        var onFocus = _this.props.onFocus;

        if (onFocus) {
          onFocus(e);
        }
      };

      _this.handleBlur = function (e) {
        var onBlur = _this.props.onBlur;

        if (onBlur) {
          onBlur(e);
        }
      };

      _this.handleMouseEnter = function (e) {
        var onMouseEnter = _this.props.onMouseEnter;

        if (onMouseEnter) {
          onMouseEnter(e);
        }
      };

      _this.handleMouseLeave = function (e) {
        var onMouseLeave = _this.props.onMouseLeave;

        if (onMouseLeave) {
          onMouseLeave(e);
        }
      };

      _this.savePicker = function (node) {
        _this.picker = node;
      };

      _this.getDefaultLocale = function () {
        var result = (0, _extends2["default"])({}, _en_US["default"], _this.props.locale);
        result.lang = (0, _extends2["default"])({}, result.lang, (_this.props.locale || {}).lang);
        return result;
      };

      _this.renderPicker = function (locale, localeCode) {
        var _classNames2;

        var props = _this.props;
        var prefixCls = props.prefixCls,
            inputPrefixCls = props.inputPrefixCls;
        var pickerClass = (0, _classnames["default"])("".concat(prefixCls, "-picker"), (0, _defineProperty2["default"])({}, "".concat(prefixCls, "-picker-").concat(props.size), !!props.size));
        var pickerInputClass = (0, _classnames["default"])("".concat(prefixCls, "-picker-input"), inputPrefixCls, (_classNames2 = {}, (0, _defineProperty2["default"])(_classNames2, "".concat(inputPrefixCls, "-lg"), props.size === 'large'), (0, _defineProperty2["default"])(_classNames2, "".concat(inputPrefixCls, "-sm"), props.size === 'small'), (0, _defineProperty2["default"])(_classNames2, "".concat(inputPrefixCls, "-disabled"), props.disabled), _classNames2));
        var timeFormat = props.showTime && props.showTime.format || 'HH:mm:ss';
        var rcTimePickerProps = (0, _extends2["default"])({}, (0, _timePicker.generateShowHourMinuteSecond)(timeFormat), {
          format: timeFormat,
          use12Hours: props.showTime && props.showTime.use12Hours
        });
        var columns = getColumns(rcTimePickerProps);
        var timePickerCls = "".concat(prefixCls, "-time-picker-column-").concat(columns);
        var timePicker = props.showTime ? React.createElement(_Panel["default"], (0, _extends2["default"])({}, rcTimePickerProps, props.showTime, {
          prefixCls: "".concat(prefixCls, "-time-picker"),
          className: timePickerCls,
          placeholder: locale.timePickerLocale.placeholder,
          transitionName: "slide-up"
        })) : null;
        return React.createElement(Picker, (0, _extends2["default"])({}, props, {
          ref: _this.savePicker,
          pickerClass: pickerClass,
          pickerInputClass: pickerInputClass,
          locale: locale,
          localeCode: localeCode,
          timePicker: timePicker,
          onOpenChange: _this.handleOpenChange,
          onFocus: _this.handleFocus,
          onBlur: _this.handleBlur,
          onMouseEnter: _this.handleMouseEnter,
          onMouseLeave: _this.handleMouseLeave
        }));
      };

      return _this;
    }

    (0, _createClass2["default"])(PickerWrapper, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this$props = this.props,
            autoFocus = _this$props.autoFocus,
            disabled = _this$props.disabled;

        if (autoFocus && !disabled) {
          this.focus();
        }
      }
    }, {
      key: "focus",
      value: function focus() {
        this.picker.focus();
      }
    }, {
      key: "blur",
      value: function blur() {
        this.picker.blur();
      }
    }, {
      key: "render",
      value: function render() {
        return React.createElement(_LocaleReceiver["default"], {
          componentName: "DatePicker",
          defaultLocale: this.getDefaultLocale
        }, this.renderPicker);
      }
    }]);
    return PickerWrapper;
  }(React.Component), _a.defaultProps = {
    format: defaultFormat || 'YYYY-MM-DD',
    transitionName: 'slide-up',
    popupStyle: {},
    onChange: function onChange() {},
    onOk: function onOk() {},
    onOpenChange: function onOpenChange() {},
    locale: {},
    prefixCls: 'ant-calendar',
    inputPrefixCls: 'ant-input'
  }, _a;
}