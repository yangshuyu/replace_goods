"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var React = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];
  }
  return t;
};

var Comment =
/*#__PURE__*/
function (_React$Component) {
  (0, _inherits2["default"])(Comment, _React$Component);

  function Comment() {
    var _this;

    (0, _classCallCheck2["default"])(this, Comment);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(Comment).apply(this, arguments));

    _this.renderNested = function (children) {
      var prefixCls = _this.props.prefixCls;
      return React.createElement("div", {
        className: (0, _classnames["default"])("".concat(prefixCls, "-nested"))
      }, children);
    };

    return _this;
  }

  (0, _createClass2["default"])(Comment, [{
    key: "getAction",
    value: function getAction(actions) {
      if (!actions || !actions.length) {
        return null;
      }

      var actionList = actions.map(function (action, index) {
        return React.createElement("li", {
          key: "action-".concat(index)
        }, action);
      });
      return actionList;
    }
  }, {
    key: "render",
    value: function render() {
      var _a = this.props,
          actions = _a.actions,
          author = _a.author,
          avatar = _a.avatar,
          children = _a.children,
          className = _a.className,
          content = _a.content,
          prefixCls = _a.prefixCls,
          style = _a.style,
          datetime = _a.datetime,
          otherProps = __rest(_a, ["actions", "author", "avatar", "children", "className", "content", "prefixCls", "style", "datetime"]);

      var avatarDom = React.createElement("div", {
        className: "".concat(prefixCls, "-avatar")
      }, typeof avatar === 'string' ? React.createElement("img", {
        src: avatar
      }) : avatar);
      var actionDom = actions && actions.length ? React.createElement("ul", {
        className: "".concat(prefixCls, "-actions")
      }, this.getAction(actions)) : null;
      var authorContent = React.createElement("div", {
        className: "".concat(prefixCls, "-content-author")
      }, author && React.createElement("span", {
        className: "".concat(prefixCls, "-content-author-name")
      }, author), datetime && React.createElement("span", {
        className: "".concat(prefixCls, "-content-author-time")
      }, datetime));
      var contentDom = React.createElement("div", {
        className: "".concat(prefixCls, "-content")
      }, authorContent, React.createElement("div", {
        className: "".concat(prefixCls, "-content-detail")
      }, content), actionDom);
      var comment = React.createElement("div", {
        className: "".concat(prefixCls, "-inner")
      }, avatarDom, contentDom);
      return React.createElement("div", (0, _extends2["default"])({}, otherProps, {
        className: (0, _classnames["default"])(prefixCls, className),
        style: style
      }), comment, children ? this.renderNested(children) : null);
    }
  }]);
  return Comment;
}(React.Component);

exports["default"] = Comment;
Comment.defaultProps = {
  prefixCls: 'ant-comment'
};