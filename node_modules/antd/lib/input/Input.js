"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var React = _interopRequireWildcard(require("react"));

var PropTypes = _interopRequireWildcard(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _omit = _interopRequireDefault(require("omit.js"));

function fixControlledValue(value) {
  if (typeof value === 'undefined' || value === null) {
    return '';
  }

  return value;
}

var Input =
/*#__PURE__*/
function (_React$Component) {
  (0, _inherits2["default"])(Input, _React$Component);

  function Input() {
    var _this;

    (0, _classCallCheck2["default"])(this, Input);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(Input).apply(this, arguments));

    _this.handleKeyDown = function (e) {
      var _this$props = _this.props,
          onPressEnter = _this$props.onPressEnter,
          onKeyDown = _this$props.onKeyDown;

      if (e.keyCode === 13 && onPressEnter) {
        onPressEnter(e);
      }

      if (onKeyDown) {
        onKeyDown(e);
      }
    };

    _this.saveInput = function (node) {
      _this.input = node;
    };

    return _this;
  }

  (0, _createClass2["default"])(Input, [{
    key: "focus",
    value: function focus() {
      this.input.focus();
    }
  }, {
    key: "blur",
    value: function blur() {
      this.input.blur();
    }
  }, {
    key: "select",
    value: function select() {
      this.input.select();
    }
  }, {
    key: "getInputClassName",
    value: function getInputClassName() {
      var _classNames;

      var _this$props2 = this.props,
          prefixCls = _this$props2.prefixCls,
          size = _this$props2.size,
          disabled = _this$props2.disabled;
      return (0, _classnames["default"])(prefixCls, (_classNames = {}, (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-sm"), size === 'small'), (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-lg"), size === 'large'), (0, _defineProperty2["default"])(_classNames, "".concat(prefixCls, "-disabled"), disabled), _classNames));
    }
  }, {
    key: "renderLabeledInput",
    value: function renderLabeledInput(children) {
      var _classNames3;

      var props = this.props; // Not wrap when there is not addons

      if (!props.addonBefore && !props.addonAfter) {
        return children;
      }

      var wrapperClassName = "".concat(props.prefixCls, "-group");
      var addonClassName = "".concat(wrapperClassName, "-addon");
      var addonBefore = props.addonBefore ? React.createElement("span", {
        className: addonClassName
      }, props.addonBefore) : null;
      var addonAfter = props.addonAfter ? React.createElement("span", {
        className: addonClassName
      }, props.addonAfter) : null;
      var className = (0, _classnames["default"])("".concat(props.prefixCls, "-wrapper"), (0, _defineProperty2["default"])({}, wrapperClassName, addonBefore || addonAfter));
      var groupClassName = (0, _classnames["default"])("".concat(props.prefixCls, "-group-wrapper"), (_classNames3 = {}, (0, _defineProperty2["default"])(_classNames3, "".concat(props.prefixCls, "-group-wrapper-sm"), props.size === 'small'), (0, _defineProperty2["default"])(_classNames3, "".concat(props.prefixCls, "-group-wrapper-lg"), props.size === 'large'), _classNames3)); // Need another wrapper for changing display:table to display:inline-block
      // and put style prop in wrapper

      return React.createElement("span", {
        className: groupClassName,
        style: props.style
      }, React.createElement("span", {
        className: className
      }, addonBefore, React.cloneElement(children, {
        style: null
      }), addonAfter));
    }
  }, {
    key: "renderLabeledIcon",
    value: function renderLabeledIcon(children) {
      var _classNames4;

      var props = this.props;

      if (!('prefix' in props || 'suffix' in props)) {
        return children;
      }

      var prefix = props.prefix ? React.createElement("span", {
        className: "".concat(props.prefixCls, "-prefix")
      }, props.prefix) : null;
      var suffix = props.suffix ? React.createElement("span", {
        className: "".concat(props.prefixCls, "-suffix")
      }, props.suffix) : null;
      var affixWrapperCls = (0, _classnames["default"])(props.className, "".concat(props.prefixCls, "-affix-wrapper"), (_classNames4 = {}, (0, _defineProperty2["default"])(_classNames4, "".concat(props.prefixCls, "-affix-wrapper-sm"), props.size === 'small'), (0, _defineProperty2["default"])(_classNames4, "".concat(props.prefixCls, "-affix-wrapper-lg"), props.size === 'large'), _classNames4));
      return React.createElement("span", {
        className: affixWrapperCls,
        style: props.style
      }, prefix, React.cloneElement(children, {
        style: null,
        className: this.getInputClassName()
      }), suffix);
    }
  }, {
    key: "renderInput",
    value: function renderInput() {
      var _this$props3 = this.props,
          value = _this$props3.value,
          className = _this$props3.className; // Fix https://fb.me/react-unknown-prop

      var otherProps = (0, _omit["default"])(this.props, ['prefixCls', 'onPressEnter', 'addonBefore', 'addonAfter', 'prefix', 'suffix']);

      if ('value' in this.props) {
        otherProps.value = fixControlledValue(value); // Input elements must be either controlled or uncontrolled,
        // specify either the value prop, or the defaultValue prop, but not both.

        delete otherProps.defaultValue;
      }

      return this.renderLabeledIcon(React.createElement("input", (0, _extends2["default"])({}, otherProps, {
        className: (0, _classnames["default"])(this.getInputClassName(), className),
        onKeyDown: this.handleKeyDown,
        ref: this.saveInput
      })));
    }
  }, {
    key: "render",
    value: function render() {
      return this.renderLabeledInput(this.renderInput());
    }
  }]);
  return Input;
}(React.Component);

exports["default"] = Input;
Input.defaultProps = {
  prefixCls: 'ant-input',
  type: 'text',
  disabled: false
};
Input.propTypes = {
  type: PropTypes.string,
  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  size: PropTypes.oneOf(['small', 'default', 'large']),
  maxLength: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  disabled: PropTypes.bool,
  value: PropTypes.any,
  defaultValue: PropTypes.any,
  className: PropTypes.string,
  addonBefore: PropTypes.node,
  addonAfter: PropTypes.node,
  prefixCls: PropTypes.string,
  onPressEnter: PropTypes.func,
  onKeyDown: PropTypes.func,
  onKeyUp: PropTypes.func,
  onFocus: PropTypes.func,
  onBlur: PropTypes.func,
  prefix: PropTypes.node,
  suffix: PropTypes.node
};