"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generateShowHourMinuteSecond = generateShowHourMinuteSecond;
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var React = _interopRequireWildcard(require("react"));

var moment = _interopRequireWildcard(require("moment"));

var _reactLifecyclesCompat = require("react-lifecycles-compat");

var _TimePicker = _interopRequireDefault(require("rc-time-picker/lib/TimePicker"));

var _classnames = _interopRequireDefault(require("classnames"));

var _LocaleReceiver = _interopRequireDefault(require("../locale-provider/LocaleReceiver"));

var _configProvider = require("../config-provider");

var _en_US = _interopRequireDefault(require("./locale/en_US"));

var _interopDefault = _interopRequireDefault(require("../_util/interopDefault"));

var _icon = _interopRequireDefault(require("../icon"));

var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];
  }
  return t;
};

function generateShowHourMinuteSecond(format) {
  // Ref: http://momentjs.com/docs/#/parsing/string-format/
  return {
    showHour: format.indexOf('H') > -1 || format.indexOf('h') > -1 || format.indexOf('k') > -1,
    showMinute: format.indexOf('m') > -1,
    showSecond: format.indexOf('s') > -1
  };
}

var TimePicker =
/*#__PURE__*/
function (_React$Component) {
  (0, _inherits2["default"])(TimePicker, _React$Component);

  function TimePicker(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, TimePicker);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(TimePicker).call(this, props));

    _this.handleChange = function (value) {
      if (!('value' in _this.props)) {
        _this.setState({
          value: value
        });
      }

      var _this$props = _this.props,
          onChange = _this$props.onChange,
          _this$props$format = _this$props.format,
          format = _this$props$format === void 0 ? 'HH:mm:ss' : _this$props$format;

      if (onChange) {
        onChange(value, value && value.format(format) || '');
      }
    };

    _this.handleOpenClose = function (_ref) {
      var open = _ref.open;
      var onOpenChange = _this.props.onOpenChange;

      if (onOpenChange) {
        onOpenChange(open);
      }
    };

    _this.saveTimePicker = function (timePickerRef) {
      _this.timePickerRef = timePickerRef;
    };

    _this.renderTimePicker = function (locale) {
      var _classNames2;

      var _a = _this.props,
          getPopupContainer = _a.getPopupContainer,
          props = __rest(_a, ["getPopupContainer"]);

      delete props.defaultValue;

      var format = _this.getDefaultFormat();

      var className = (0, _classnames["default"])(props.className, (0, _defineProperty2["default"])({}, "".concat(props.prefixCls, "-").concat(props.size), !!props.size));

      var addon = function addon(panel) {
        return props.addon ? React.createElement("div", {
          className: "".concat(props.prefixCls, "-panel-addon")
        }, props.addon(panel)) : null;
      };

      var suffixIcon = props.suffixIcon,
          prefixCls = props.prefixCls;
      var clockIcon = suffixIcon && (React.isValidElement(suffixIcon) ? React.cloneElement(suffixIcon, {
        className: (0, _classnames["default"])((_classNames2 = {}, (0, _defineProperty2["default"])(_classNames2, suffixIcon.props.className, suffixIcon.props.className), (0, _defineProperty2["default"])(_classNames2, "".concat(prefixCls, "-clock-icon"), true), _classNames2))
      }) : React.createElement("span", {
        className: "".concat(prefixCls, "-clock-icon")
      }, suffixIcon)) || React.createElement(_icon["default"], {
        type: "clock-circle",
        className: "".concat(prefixCls, "-clock-icon"),
        theme: "outlined"
      });
      var inputIcon = React.createElement("span", {
        className: "".concat(prefixCls, "-icon")
      }, clockIcon);
      var clearIcon = React.createElement(_icon["default"], {
        type: "close-circle",
        className: "".concat(prefixCls, "-panel-clear-btn-icon"),
        theme: "filled"
      });
      return React.createElement(_configProvider.ConfigConsumer, null, function (_ref2) {
        var getContextPopupContainer = _ref2.getPopupContainer;
        return React.createElement(_TimePicker["default"], (0, _extends2["default"])({}, generateShowHourMinuteSecond(format), props, {
          getPopupContainer: getPopupContainer || getContextPopupContainer,
          ref: _this.saveTimePicker,
          format: format,
          className: className,
          value: _this.state.value,
          placeholder: props.placeholder === undefined ? locale.placeholder : props.placeholder,
          onChange: _this.handleChange,
          onOpen: _this.handleOpenClose,
          onClose: _this.handleOpenClose,
          addon: addon,
          inputIcon: inputIcon,
          clearIcon: clearIcon
        }));
      });
    };

    var value = props.value || props.defaultValue;

    if (value && !(0, _interopDefault["default"])(moment).isMoment(value)) {
      throw new Error('The value/defaultValue of TimePicker must be a moment object after `antd@2.0`, ' + 'see: https://u.ant.design/time-picker-value');
    }

    _this.state = {
      value: value
    };
    return _this;
  }

  (0, _createClass2["default"])(TimePicker, [{
    key: "focus",
    value: function focus() {
      this.timePickerRef.focus();
    }
  }, {
    key: "blur",
    value: function blur() {
      this.timePickerRef.blur();
    }
  }, {
    key: "getDefaultFormat",
    value: function getDefaultFormat() {
      var _this$props2 = this.props,
          format = _this$props2.format,
          use12Hours = _this$props2.use12Hours;

      if (format) {
        return format;
      } else if (use12Hours) {
        return 'h:mm:ss a';
      }

      return 'HH:mm:ss';
    }
  }, {
    key: "render",
    value: function render() {
      return React.createElement(_LocaleReceiver["default"], {
        componentName: "TimePicker",
        defaultLocale: _en_US["default"]
      }, this.renderTimePicker);
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps) {
      if ('value' in nextProps) {
        return {
          value: nextProps.value
        };
      }

      return null;
    }
  }]);
  return TimePicker;
}(React.Component);

TimePicker.defaultProps = {
  prefixCls: 'ant-time-picker',
  align: {
    offset: [0, -2]
  },
  disabled: false,
  disabledHours: undefined,
  disabledMinutes: undefined,
  disabledSeconds: undefined,
  hideDisabledOptions: false,
  placement: 'bottomLeft',
  transitionName: 'slide-up',
  focusOnOpen: true
};
(0, _reactLifecyclesCompat.polyfill)(TimePicker);
var _default = TimePicker;
exports["default"] = _default;