"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var React = _interopRequireWildcard(require("react"));

var _reactLifecyclesCompat = require("react-lifecycles-compat");

var _tooltip = _interopRequireDefault(require("../tooltip"));

var _icon = _interopRequireDefault(require("../icon"));

var _button = _interopRequireDefault(require("../button"));

var _LocaleReceiver = _interopRequireDefault(require("../locale-provider/LocaleReceiver"));

var _default2 = _interopRequireDefault(require("../locale-provider/default"));

var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];
  }
  return t;
};

var Popconfirm =
/*#__PURE__*/
function (_React$Component) {
  (0, _inherits2["default"])(Popconfirm, _React$Component);

  function Popconfirm(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, Popconfirm);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(Popconfirm).call(this, props));

    _this.onConfirm = function (e) {
      _this.setVisible(false, e);

      var onConfirm = _this.props.onConfirm;

      if (onConfirm) {
        onConfirm.call((0, _assertThisInitialized2["default"])((0, _assertThisInitialized2["default"])(_this)), e);
      }
    };

    _this.onCancel = function (e) {
      _this.setVisible(false, e);

      var onCancel = _this.props.onCancel;

      if (onCancel) {
        onCancel.call((0, _assertThisInitialized2["default"])((0, _assertThisInitialized2["default"])(_this)), e);
      }
    };

    _this.onVisibleChange = function (visible) {
      _this.setVisible(visible);
    };

    _this.saveTooltip = function (node) {
      _this.tooltip = node;
    };

    _this.renderOverlay = function (popconfirmLocale) {
      var _this$props = _this.props,
          prefixCls = _this$props.prefixCls,
          okButtonProps = _this$props.okButtonProps,
          cancelButtonProps = _this$props.cancelButtonProps,
          title = _this$props.title,
          cancelText = _this$props.cancelText,
          okText = _this$props.okText,
          okType = _this$props.okType,
          icon = _this$props.icon;
      return React.createElement("div", null, React.createElement("div", {
        className: "".concat(prefixCls, "-inner-content")
      }, React.createElement("div", {
        className: "".concat(prefixCls, "-message")
      }, icon, React.createElement("div", {
        className: "".concat(prefixCls, "-message-title")
      }, title)), React.createElement("div", {
        className: "".concat(prefixCls, "-buttons")
      }, React.createElement(_button["default"], (0, _extends2["default"])({
        onClick: _this.onCancel,
        size: "small"
      }, cancelButtonProps), cancelText || popconfirmLocale.cancelText), React.createElement(_button["default"], (0, _extends2["default"])({
        onClick: _this.onConfirm,
        type: okType,
        size: "small"
      }, okButtonProps), okText || popconfirmLocale.okText))));
    };

    _this.state = {
      visible: props.visible
    };
    return _this;
  }

  (0, _createClass2["default"])(Popconfirm, [{
    key: "getPopupDomNode",
    value: function getPopupDomNode() {
      return this.tooltip.getPopupDomNode();
    }
  }, {
    key: "setVisible",
    value: function setVisible(visible, e) {
      var props = this.props;

      if (!('visible' in props)) {
        this.setState({
          visible: visible
        });
      }

      var onVisibleChange = props.onVisibleChange;

      if (onVisibleChange) {
        onVisibleChange(visible, e);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _a = this.props,
          prefixCls = _a.prefixCls,
          placement = _a.placement,
          restProps = __rest(_a, ["prefixCls", "placement"]);

      var overlay = React.createElement(_LocaleReceiver["default"], {
        componentName: "Popconfirm",
        defaultLocale: _default2["default"].Popconfirm
      }, this.renderOverlay);
      return React.createElement(_tooltip["default"], (0, _extends2["default"])({}, restProps, {
        prefixCls: prefixCls,
        placement: placement,
        onVisibleChange: this.onVisibleChange,
        visible: this.state.visible,
        overlay: overlay,
        ref: this.saveTooltip
      }));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps) {
      if ('visible' in nextProps) {
        return {
          visible: nextProps.visible
        };
      } else if ('defaultVisible' in nextProps) {
        return {
          visible: nextProps.defaultVisible
        };
      }

      return null;
    }
  }]);
  return Popconfirm;
}(React.Component);

Popconfirm.defaultProps = {
  prefixCls: 'ant-popover',
  transitionName: 'zoom-big',
  placement: 'top',
  trigger: 'click',
  okType: 'primary',
  icon: React.createElement(_icon["default"], {
    type: "exclamation-circle",
    theme: "filled"
  })
};
(0, _reactLifecyclesCompat.polyfill)(Popconfirm);
var _default = Popconfirm;
exports["default"] = _default;